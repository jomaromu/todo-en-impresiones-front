{"ast":null,"code":"(function (global, factory) {\n  typeof exports === \"object\" && typeof module !== \"undefined\" ? module.exports = factory(require(\"contained-periodic-values\")) : typeof define === \"function\" && define.amd ? define([\"contained-periodic-values\"], factory) : global.momentBusiness = factory(global.containedPeriodicValues);\n})(this, function (containedPeriodicValues) {\n  \"use strict\";\n\n  function determineSign(x) {\n    x = +x;\n    return x > 0 ? 1 : -1;\n  }\n\n  var moment_business = {\n    weekDays: function weekDays(startMoment, endMoment) {\n      var start = undefined,\n          end = undefined;\n      var reverse = endMoment.isBefore(startMoment);\n\n      if (reverse) {\n        start = endMoment;\n        end = startMoment;\n      } else {\n        start = startMoment;\n        end = endMoment;\n      }\n\n      var startDay = start.day();\n      var totalDays = Math.abs(end.diff(start, \"days\"));\n      var containedSundays = containedPeriodicValues(startDay, totalDays + startDay, 0, 7);\n      var containedSaturdays = containedPeriodicValues(startDay, totalDays + startDay, 6, 7);\n      var coefficient = reverse ? -1 : 1;\n      return coefficient * (totalDays - (containedSaturdays + containedSundays));\n    },\n    weekendDays: function weekendDays(startMoment, endMoment) {\n      var totalDaysDiff = endMoment.diff(startMoment, \"days\");\n      var weekDays = this.weekDays(startMoment, endMoment);\n      return totalDaysDiff - weekDays;\n    },\n    addWeekDays: function addWeekDays(moment, amount) {\n      if (amount === 0 || isNaN(amount)) {\n        return moment;\n      }\n\n      var sign = determineSign(amount);\n      var day = moment.day();\n      var absIncrement = Math.abs(amount);\n      var days = 0;\n\n      if (day === 0 && sign === -1) {\n        days = 1;\n      } else if (day === 6 && sign === 1) {\n        days = 1;\n      } // Add padding for weekends.\n\n\n      var paddedAbsIncrement = absIncrement;\n\n      if (day !== 0 && day !== 6 && sign > 0) {\n        paddedAbsIncrement += day;\n      } else if (day !== 0 && day !== 6 && sign < 0) {\n        paddedAbsIncrement += 6 - day;\n      }\n\n      var weekendsInbetween = Math.max(Math.floor(paddedAbsIncrement / 5) - 1, 0) + (paddedAbsIncrement > 5 && paddedAbsIncrement % 5 > 0 ? 1 : 0); // Add the increment and number of weekends.\n\n      days += absIncrement + weekendsInbetween * 2;\n      moment.add(sign * days, \"days\");\n      return moment;\n    },\n    subtractWeekDays: function subtractWeekDays(moment, amount) {\n      return this.addWeekDays(moment, -amount);\n    },\n    isWeekDay: function isWeekDay(moment) {\n      return moment.isoWeekday() < 6;\n    },\n    isWeekendDay: function isWeekendDay(moment) {\n      return moment.isoWeekday() > 5;\n    }\n  };\n  return moment_business;\n}); //# sourceMappingURL=./moment-business.js.map","map":null,"metadata":{},"sourceType":"script"}