{"ast":null,"code":"import { environment } from '../../environments/environment';\nimport { HttpHeaders } from '@angular/common/http';\nimport { map } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let UserService = /*#__PURE__*/(() => {\n  class UserService {\n    constructor(http) {\n      this.http = http;\n    }\n\n    crearUsuario(data) {\n      const url = `${environment.url}/worker/nuevoUsuario`;\n      const header = new HttpHeaders({\n        token: data.token\n      });\n      return this.http.post(url, data, {\n        headers: header\n      }).pipe(map(resp => {\n        return resp;\n      }));\n    }\n\n    login(usuario) {\n      const url = `${environment.url}/worker/loguearUsuario`;\n      return this.http.post(url, usuario).pipe(map(resp => {\n        return resp;\n      }));\n    }\n\n    decodificarToken(token) {\n      const url = `${environment.url}/worker/decodificarToken`;\n      const header = new HttpHeaders({\n        token\n      });\n      return this.http.get(url, {\n        headers: header\n      }).pipe(map(resp => {\n        return resp;\n      }));\n    }\n\n    refrescarToken(idUsuario) {\n      const url = `${environment.url}/worker/refrescarToken`;\n      return this.http.post(url, {\n        idUsuario\n      }).pipe(map(resp => {\n        return resp;\n      }));\n    }\n\n    obtenerUsuarios(token) {\n      const url = `${environment.url}/worker/obtenerTodosUsuarios`;\n      const header = new HttpHeaders({\n        token\n      });\n      return this.http.get(url, {\n        headers: header\n      }).pipe(map(resp => {\n        return resp;\n      }));\n    }\n\n    obtenerUsuarioID(idUsuario, token) {\n      const url = `${environment.url}/worker/obtenerUsuarioID`;\n      const header = new HttpHeaders({\n        id: idUsuario,\n        token\n      });\n      return this.http.get(url, {\n        headers: header\n      }).pipe(map(resp => {\n        return resp;\n      }));\n    } // Obtener todos los usuarios por role\n\n\n    obtenerRoles(token) {\n      const url = `${environment.url}/colrole/obtenerTodos`;\n      const header = new HttpHeaders({\n        token\n      });\n      return this.http.get(url, {\n        headers: header\n      }).pipe(map(resp => {\n        return resp;\n      }));\n    } // Obtener usuarios especificos por role\n\n\n    obtenerUsuariosRole(token, role) {\n      const url = `${environment.url}/worker/obtenerUsuariosRole`;\n      const header = new HttpHeaders({\n        token,\n        role\n      });\n      return this.http.get(url, {\n        headers: header\n      }).pipe(map(resp => {\n        return resp;\n      }));\n    }\n\n    editarUsuarioID(id, token, data) {\n      const url = `${environment.url}/worker/editarUsuario`;\n      const header = new HttpHeaders({\n        id,\n        estado: data.estado,\n        colaborador_role: data.colaborador_role,\n        token\n      });\n      return this.http.put(url, data, {\n        headers: header\n      }).pipe(map(resp => resp));\n    }\n\n    eliminarUsuarioID(id, token) {\n      const url = `${environment.url}/worker/eliminarUsuario`;\n      const header = new HttpHeaders({\n        id,\n        token\n      });\n      return this.http.delete(url, {\n        headers: header\n      }).pipe(map(resp => resp));\n    }\n\n    cargarUsuariosSucursalRole(data) {\n      const url = `${environment.url}/worker/cargarUsuariosSucursalRole`;\n      const header = new HttpHeaders({\n        role: data.role,\n        sucursal: data.sucursal,\n        token: data.token\n      });\n      return this.http.get(url, {\n        headers: header\n      }).pipe(map(resp => resp));\n    } // clientes\n\n\n    obtenerClientes(token) {\n      const url = `${environment.url}/client/obtenerTodosUsuarios`;\n      const header = new HttpHeaders({\n        token\n      });\n      return this.http.get(url, {\n        headers: header\n      }).pipe(map(resp => {\n        return resp;\n      }));\n    }\n\n    obtenerClienteID(idUsuario, token) {\n      const url = `${environment.url}/client/obtenerUsuarioID`;\n      const header = new HttpHeaders({\n        id: idUsuario,\n        token\n      });\n      return this.http.get(url, {\n        headers: header\n      }).pipe(map(resp => {\n        return resp;\n      }));\n    }\n\n    obtenerClienteRoles(token) {\n      const url = `${environment.url}/clientRole/obtenerTodos`;\n      const header = new HttpHeaders({\n        token\n      });\n      return this.http.get(url, {\n        headers: header\n      }).pipe(map(resp => {\n        return resp;\n      }));\n    }\n\n    crearCliente(data) {\n      const url = `${environment.url}/client/nuevoUsuario`;\n      const header = new HttpHeaders({\n        token: data.token\n      });\n      return this.http.post(url, data, {\n        headers: header\n      }).pipe(map(resp => {\n        return resp;\n      }));\n    }\n\n    eliminarClienteID(id, token) {\n      const url = `${environment.url}/client/eliminarUsuario`;\n      const header = new HttpHeaders({\n        id,\n        token\n      });\n      return this.http.delete(url, {\n        headers: header\n      }).pipe(map(resp => resp));\n    }\n\n    editarClienteID(id, token, data) {\n      const url = `${environment.url}/client/editarUsuario`;\n      const header = new HttpHeaders({\n        id,\n        estado: data.estado,\n        client_role: data.client_role,\n        token\n      });\n      return this.http.put(url, data, {\n        headers: header\n      }).pipe(map(resp => resp));\n    }\n\n    obtenerClienteCriterioNombre(data) {\n      const url = `${environment.url}/client/obtenerUsuarioCriterioNombre`;\n      const header = new HttpHeaders({\n        token: data.token,\n        criterioNombre: data.criterioNombre\n      });\n      return this.http.get(url, {\n        headers: header\n      }).pipe(map(resp => {\n        return resp;\n      }));\n    }\n\n    obtenerClienteCriterioTelefono(data) {\n      const url = `${environment.url}/client/obtenerUsuarioTel`;\n      const header = new HttpHeaders({\n        token: data.token,\n        telefono: data.telefono\n      });\n      return this.http.get(url, {\n        headers: header\n      }).pipe(map(resp => {\n        return resp;\n      }));\n    }\n\n  }\n\n  UserService.ɵfac = function UserService_Factory(t) {\n    return new (t || UserService)(i0.ɵɵinject(i1.HttpClient));\n  };\n\n  UserService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: UserService,\n    factory: UserService.ɵfac,\n    providedIn: 'root'\n  });\n  return UserService;\n})();","map":null,"metadata":{},"sourceType":"module"}