{"ast":null,"code":"(function (global, factory) {\n  typeof exports === \"object\" && typeof module !== \"undefined\" ? module.exports = factory() : typeof define === \"function\" && define.amd ? define(factory) : global.nearestPeriodicValue = factory();\n})(this, function () {\n  \"use strict\";\n  /*jshint -W018 */\n\n  function nearestPeriodicValue(point, value, period) {\n    var relation = (value - point) / period; // We're equidistant from the nearest point if the\n    // distance from the point is a half-integer value\n    // of our period.\n\n    var equidistant = !(relation % 0.5) && relation % 1; // If we're equidistant, then we add a period to\n    // ensure that we always pick the value in front\n\n    var mod = equidistant ? period : 0; // Adjust our value by an amount given by the closest #\n    // of periods contained in the distance between the point\n    // and the value\n\n    return mod + (value - period * Math.round(relation));\n  }\n\n  var nearest_periodic_value = nearestPeriodicValue;\n  return nearest_periodic_value;\n}); //# sourceMappingURL=./nearest-periodic-value.js.map","map":null,"metadata":{},"sourceType":"script"}